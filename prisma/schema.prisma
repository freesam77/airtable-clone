generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]
}

model Base {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    tables      Table[]
    createdById String
    user        User     @relation(fields: [createdById], references: [id])

    @@index([name, createdById])
}

model Table {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    columns     Column[]
    rows        Row[]
    base        Base     @relation(fields: [baseId], references: [id])
    baseId      String

    @@index([name, baseId])
}

model Column {
    id         String      @id @default(cuid())
    name       String
    type       ColumnType
    required   Boolean     @default(false)
    position   Int
    tableId    String
    cellValues CellValue[]
    table      Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)

    @@unique([tableId, name])
    @@index([tableId, position])
}

model Row {
    id         String      @id @default(cuid())
    position   Int
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    tableId    String
    cellValues CellValue[]
    table      Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)

    @@index([tableId, position])
}

model CellValue {
    id          String  @id @default(cuid())
    textValue   String?
    numberValue Float?
    columnId    String
    rowId       String
    column      Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)
    row         Row     @relation(fields: [rowId], references: [id], onDelete: Cascade)

    @@unique([columnId, rowId])
    @@index([columnId])
    @@index([rowId])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ColumnType {
    TEXT
    NUMBER
}
